



@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
}



@mixin vmf-custom-opacity($opacity-val:0) {
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity='#{$opacity-val}')";
  filter: alpha(opacity=$opacity-val);
  -khtml-opacity: $opacity-val;
  -moz-opacity: $opacity-val;
  opacity: $opacity-val;
}

@mixin margin-top($top) {
    margin-top:$top;
}

@mixin margin($margin) {
    margin:$margin;
}

@mixin margin-left($marginLeft) {
    margin-left:$marginLeft;
}

@mixin padding($padding) {
    padding:$padding;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}
@mixin border-radius-custom($radius-tl,$radius-tr,$radius-br,$radius-bl) {
  -webkit-border-radius: $radius-tl $radius-tr $radius-br $radius-bl;
     -moz-border-radius: $radius-tl $radius-tr $radius-br $radius-bl;
      -ms-border-radius: $radius-tl $radius-tr $radius-br $radius-bl;
          border-radius: $radius-tl $radius-tr $radius-br $radius-bl;
}
@mixin box-sizing($boxSizing) {
  -webkit-box-sizing: $boxSizing;
     -moz-box-sizing: $boxSizing;
      -ms-box-sizing: $boxSizing;
          box-sizing: $boxSizing;
}

@mixin transition($easeIn){
  -webkit-transition: all 0.3s ease-in;
       -moz-transition: all 0.3s ease-in;
      -ms-transition: all 0.3s ease-in;;
      transition: all 0.3s ease-in;
}

@mixin fadeout($fadeout){
    -webkit-transition: max-height 0.8s ease-in;
       -moz-transition: max-height 0.8s ease-in;
        -ms-transition: max-height 0.8s ease-in;
            transition: max-height 0.8s ease-in;
}

@mixin linearGradient($position,$primarBtncolor1,$primarBtncolor){
    background: $primarBtncolor; 
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($primarBtncolor), to($primarBtncolor1));
    background-image: -webkit-linear-gradient(top, $primarBtncolor, $primarBtncolor1); 
    //background-image:    -moz-linear-gradient(top, $primarBtncolor, $primarBtncolor1);
    background-image:     -ms-linear-gradient(top, $primarBtncolor, $primarBtncolor1);
    background-image:      -o-linear-gradient(top, $primarBtncolor, $primarBtncolor1);
    background: -moz-linear-gradient(top, $primarBtncolor, $primarBtncolor1); /* FF3.6+ */
    -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$primarBtncolor}', EndColorStr='#{$primarBtncolor1}')";
    background-image: linear-gradient(to top, $primarBtncolor, $primarBtncolor1);    
}
@mixin boxShadow($shadowColor){
    -moz-box-shadow: inset 1px 4px 6px -6px;
    -webkit-box-shadow: inset 1px 4px 6px -6px;
    box-shadow: inset 1px 4px 6px -6px;
}


@mixin boxShadowValues($shadowH,$shadowY,$shadowBlur,$shadowSpread,$shadowColor){  
    -moz-box-shadow: $shadowH $shadowY $shadowBlur $shadowSpread $shadowColor;
    -webkit-box-shadow:   $shadowH $shadowY $shadowBlur $shadowSpread $shadowColor ;
    box-shadow:   $shadowH $shadowY $shadowBlur $shadowSpread $shadowColor ;
}



@mixin margin-top($top) {
  margin-top:$top;
}

@mixin margin($margin) {
  margin:$margin;
}

@mixin margin-left($marginLeft) {
  margin-left:$marginLeft;
}

@mixin padding($padding) {
  padding:$padding;
}
@mixin boxShadowNone() {
    -moz-box-shadow:none;
    -webkit-box-shadow: none;
     box-shadow: none;
}
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}
@mixin box-sizing($boxSizing) {
  -webkit-box-sizing: $boxSizing;
  -moz-box-sizing: $boxSizing;
  -ms-box-sizing: $boxSizing;
  box-sizing: $boxSizing;
}

@mixin transition($easeIn){
  -webkit-transition:	all 0.3s ease-in;
  -moz-transition: all 0.3s ease-in;
  -ms-transition: all 0.3s ease-in;;
  transition: all 0.3s ease-in;
}

@mixin fadeout($fadeout){
  -webkit-transition: max-height 0.8s ease-in;
  -moz-transition: max-height 0.8s ease-in;
  -ms-transition: max-height 0.8s ease-in;
  transition: max-height 0.8s ease-in;
}


@mixin boxShadowValues($shadowH,$shadowY,$shadowBlur,$shadowSpread,$shadowColor){
  -moz-box-shadow: $shadowH $shadowY $shadowBlur $shadowSpread $shadowColor;
  -webkit-box-shadow:   $shadowH $shadowY $shadowBlur $shadowSpread $shadowColor ;
  box-shadow:   $shadowH $shadowY $shadowBlur $shadowSpread $shadowColor ;
}


// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
 // @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
 // @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}
@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}
// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }

@mixin margin-top($top) {
    margin-top:$top;
}

@mixin margin($margin) {
    margin:$margin;
}

@mixin margin-left($marginLeft) {
    margin-left:$marginLeft;
}

@mixin padding($padding) {
    padding:$padding;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}
@mixin border-radius-custom($radius-tl,$radius-tr,$radius-br,$radius-bl) {
  -webkit-border-radius: $radius-tl $radius-tr $radius-br $radius-bl;
     -moz-border-radius: $radius-tl $radius-tr $radius-br $radius-bl;
      -ms-border-radius: $radius-tl $radius-tr $radius-br $radius-bl;
          border-radius: $radius-tl $radius-tr $radius-br $radius-bl;
}
@mixin box-sizing($boxSizing) {
  -webkit-box-sizing: $boxSizing;
     -moz-box-sizing: $boxSizing;
      -ms-box-sizing: $boxSizing;
          box-sizing: $boxSizing;
}

@mixin transition($easeIn){
  -webkit-transition: all 0.3s ease-in;
       -moz-transition: all 0.3s ease-in;
      -ms-transition: all 0.3s ease-in;;
      transition: all 0.3s ease-in;
}

@mixin fadeout($fadeout){
    -webkit-transition: max-height 0.8s ease-in;
       -moz-transition: max-height 0.8s ease-in;
        -ms-transition: max-height 0.8s ease-in;
            transition: max-height 0.8s ease-in;
}

@mixin linearGradient($position,$primarBtncolor,$primarBtncolor1){
    background: $primarBtncolor;
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($primarBtncolor), to($primarBtncolor1));
    background-image: -webkit-linear-gradient(top, $primarBtncolor, $primarBtncolor1);
    //background-image:    -moz-linear-gradient(top, $primarBtncolor, $primarBtncolor1);
    background-image:     -ms-linear-gradient(top, $primarBtncolor, $primarBtncolor1);
    background-image:      -o-linear-gradient(top, $primarBtncolor, $primarBtncolor1);
    background: -moz-linear-gradient(top, $primarBtncolor, $primarBtncolor1); /* FF3.6+ */
    -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$primarBtncolor}', EndColorStr='#{$primarBtncolor1}')";
}
@mixin boxShadow($shadowColor){
    -moz-box-shadow: inset 1px 4px 6px -6px;
    -webkit-box-shadow: inset 1px 4px 6px -6px;
    box-shadow: inset 1px 4px 6px -6px;
}


@mixin boxShadowValues($shadowH,$shadowY,$shadowBlur,$shadowSpread,$shadowColor){
    -moz-box-shadow: $shadowH $shadowY $shadowBlur $shadowSpread $shadowColor;
    -webkit-box-shadow:   $shadowH $shadowY $shadowBlur $shadowSpread $shadowColor ;
    box-shadow:   $shadowH $shadowY $shadowBlur $shadowSpread $shadowColor ;
}



@mixin margin-top($top) {
  margin-top:$top;
}

@mixin margin($margin) {
  margin:$margin;
}

@mixin margin-left($marginLeft) {
  margin-left:$marginLeft;
}

@mixin padding($padding) {
  padding:$padding;
}
@mixin boxShadowNone() {
    -moz-box-shadow:none;
    -webkit-box-shadow: none;
     box-shadow: none;
}
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}
@mixin box-sizing($boxSizing) {
  -webkit-box-sizing: $boxSizing;
  -moz-box-sizing: $boxSizing;
  -ms-box-sizing: $boxSizing;
  box-sizing: $boxSizing;
}

@mixin transition($easeIn){
  -webkit-transition:	all 0.3s ease-in;
  -moz-transition: all 0.3s ease-in;
  -ms-transition: all 0.3s ease-in;;
  transition: all 0.3s ease-in;
}

@mixin fadeout($fadeout){
  -webkit-transition: max-height 0.8s ease-in;
  -moz-transition: max-height 0.8s ease-in;
  -ms-transition: max-height 0.8s ease-in;
  transition: max-height 0.8s ease-in;
}


@mixin boxShadowValues($shadowH,$shadowY,$shadowBlur,$shadowSpread,$shadowColor){
  -moz-box-shadow: $shadowH $shadowY $shadowBlur $shadowSpread $shadowColor;
  -webkit-box-shadow:   $shadowH $shadowY $shadowBlur $shadowSpread $shadowColor ;
  box-shadow:   $shadowH $shadowY $shadowBlur $shadowSpread $shadowColor ;
}


// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
 // @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
 // @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}
@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}
// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}


// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}


@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}


// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}

  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}


// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}


@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}


// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}
